{"version":3,"sources":["component/Titles.js","component/Form.js","component/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","defaultValue","placeholder","Weather","city","country","temperature","src","concat","weather_icon","min_temperature","max_temperature","humidity","wind","description","error","API_KEY","App","state","undefined","_callee","e","CITY","COUNTRY","API_CALL","DATA","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","sent","json","console","log","_this","setState","main","temp","temp_min","temp_max","sys","speed","weather","icon","stop","component_Titles","component_Form","this","component_Weather","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.74d453fa.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Titles = () => (\n  <div>\n    <h1 className=\"title-container\">Weather App</h1>\n  </div>\n);\n\nexport default Titles;","import React from \"react\"\n\nconst Form = props => (\n    <form className=\"form-container\" onSubmit={props.getWeather}>\n\n        <input className=\"city-container\" type=\"text\" name=\"city\" defaultValue=\"PALA\" placeholder=\"Enter city\" />\n        <input className=\"country-container\" type=\"text\" name=\"country\" defaultValue=\"IN\" placeholder=\"Enter country\" />\n        <button>Get Weather</button>\n    \n    </form>\n);\n\nexport default Form;","import React from \"react\";\n\nconst Weather = (props) => (\n\n        <div>\n        {\n            props.city && props.country && \n                <p className=\"weather_key location\">\n                    {props.city}, {props.country}\n                </p> \n        }\n        {\n            props.temperature && \n                <p className=\"weather_key\">  \n                    <img className=\"weather_icon\" src={`http://openweathermap.org/img/wn/${props.weather_icon}@2x.png`} />\n                </p> \n        }\n        {\n            props.temperature && \n                <p className=\"weather_key temperature\">\n                    {props.temperature}°C\n                </p> \n        }\n        {\n            props.temperature && \n                <p className=\"weather_key min_max_temperature\">\n                    {props.min_temperature}°C | {props.max_temperature}°C\n                </p> \n        }\n        {\n            props.humidity && \n                <p className=\"weather_key humidity\">HUMIDITY : \n                    {props.humidity} %\n                </p> \n        }\n        {\n            props.wind && \n                <p className=\"weather_key wind_speed\">WIND SPEED : \n                    {props.wind} m/s\n                </p> \n        }\n        {\n            props.description && \n                <p className=\"weather_key conditions\">   \n                    {props.description}\n                </p> \n        }\n        {\n            props.error && <h3 className=\"weather__error error\">{props.error}</h3>\n        }\n    </div>  \n);\n\nexport default Weather;","import React from \"react\";\nimport Titles from \"./component/Titles\";\nimport Form from \"./component/Form\";\nimport Weather from \"./component/Weather\"\n\nconst API_KEY = \"aebdd7758f13157e1f0b407b96d57ed5\";\n\nclass App extends React.Component {\n  state = {\n    temperature : undefined,\n    min_temperature : undefined,\n    max_temperature : undefined,\n    city : undefined, \n    country : undefined,\n    weather_icon : undefined,\n    wind : undefined, \n    humidity : undefined, \n    description : undefined, \n    error : undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const CITY = e.target.elements.city.value;\n    const COUNTRY = e.target.elements.country.value;\n\n    const API_CALL = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${CITY},${COUNTRY}&APPID=${API_KEY}&units=metric`); \n    const DATA = await API_CALL.json();\n\n    if (CITY && COUNTRY) {\n      console.log(DATA);\n      this.setState({\n        temperature : DATA.main.temp,\n        min_temperature : DATA.main.temp_min,\n        max_temperature : DATA.main.temp_max,\n        city : DATA.name,\n        country : DATA.sys.country,\n        wind : DATA.wind.speed,\n        humidity : DATA.main.humidity,\n        weather_icon : DATA.weather[0].icon,\n        description : DATA.weather[0].description,\n        error : \"\"     \n      }); \n    }\n    else {\n      this.setState({\n        temperature : undefined,\n        min_temperature : undefined,\n        max_temperature : undefined,\n        city : undefined,\n        country : undefined,\n        wind : undefined, \n        humidity : undefined,\n        weather_icon : undefined,\n        description : undefined,\n        error : \"Please enter City and Country name...\"      \n      }); \n    }\n  }\n\n  render() {\n    \n    return (\n      <div>\n        \n        <div className=\"container\">\n          <div className=\"row\">\n            \n            <div className=\"col-md-5 form-container\">\n              <Titles />\n              <Form getWeather={this.getWeather} />  \n            </div>    \n\n            <div className=\"col-md-7 weather-container\">\n              <Weather\n                temperature = {this.state.temperature}\n                min_temperature = {this.state.min_temperature}\n                max_temperature = {this.state.max_temperature}\n                city = {this.state.city}\n                country = {this.state.country}\n                wind = {this.state.wind}\n                humidity = {this.state.humidity}\n                weather_icon = {this.state.weather_icon}\n                description = {this.state.description}\n                error = {this.state.error}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.register();\n"],"sourceRoot":""}