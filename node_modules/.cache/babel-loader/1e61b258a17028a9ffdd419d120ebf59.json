{"ast":null,"code":"var _jsxFileName = \"/home/aykara/Desktop/react/weather/src/App.js\";\nimport React from \"react\";\nimport Titles from \"./component/Titles\";\nimport Form from \"./component/Form\";\nimport Weather from \"./component/Weather\";\nconst API_KEY = \"aebdd7758f13157e1f0b407b96d57ed5\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temperature: undefined,\n      min_temperature: undefined,\n      max_temperature: undefined,\n      city: undefined,\n      country: undefined,\n      weather_icon: undefined,\n      wind: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined\n    };\n\n    this.getWeather = async e => {\n      e.preventDefault();\n      const CITY = e.target.elements.city.value;\n      const COUNTRY = e.target.elements.country.value;\n      const API_CALL = await fetch(\"http://api.openweathermap.org/data/2.5/weather?q=\".concat(CITY, \",\").concat(COUNTRY, \"&APPID=\").concat(API_KEY, \"&units=metric\"));\n      const DATA = await API_CALL.json();\n\n      if (CITY && COUNTRY) {\n        console.log(DATA);\n        this.setState({\n          temperature: DATA.main.temp,\n          min_temperature: DATA.main.temp_min,\n          max_temperature: DATA.main.temp_max,\n          city: DATA.name,\n          country: DATA.sys.country,\n          wind: DATA.wind.speed,\n          humidity: DATA.main.humidity,\n          weather_icon: DATA.weather[0].icon,\n          description: DATA.weather[0].description,\n          error: \"\"\n        });\n        console.log(weather_icon);\n      } else {\n        this.setState({\n          temperature: undefined,\n          min_temperature: undefined,\n          max_temperature: undefined,\n          city: undefined,\n          country: undefined,\n          wind: undefined,\n          humidity: undefined,\n          weather_icon: undefined,\n          description: undefined,\n          error: \"Please enter City and Country name...\"\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-5 form-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Titles, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(Form, {\n      getWeather: this.getWeather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-md-7 weather-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Weather, {\n      temperature: this.state.temperature,\n      min_temperature: this.state.min_temperature,\n      max_temperature: this.state.max_temperature,\n      city: this.state.city,\n      country: this.state.country,\n      wind: this.state.wind,\n      humidity: this.state.humidity,\n      weather_icon: this.state.weather_icon,\n      description: this.state.description,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/aykara/Desktop/react/weather/src/App.js"],"names":["React","Titles","Form","Weather","API_KEY","App","Component","state","temperature","undefined","min_temperature","max_temperature","city","country","weather_icon","wind","humidity","description","error","getWeather","e","preventDefault","CITY","target","elements","value","COUNTRY","API_CALL","fetch","DATA","json","console","log","setState","main","temp","temp_min","temp_max","name","sys","speed","weather","icon","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AAEA,MAAMC,OAAO,GAAG,kCAAhB;;AAEA,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AACNC,MAAAA,WAAW,EAAGC,SADR;AAENC,MAAAA,eAAe,EAAGD,SAFZ;AAGNE,MAAAA,eAAe,EAAGF,SAHZ;AAING,MAAAA,IAAI,EAAGH,SAJD;AAKNI,MAAAA,OAAO,EAAGJ,SALJ;AAMNK,MAAAA,YAAY,EAAGL,SANT;AAONM,MAAAA,IAAI,EAAGN,SAPD;AAQNO,MAAAA,QAAQ,EAAGP,SARL;AASNQ,MAAAA,WAAW,EAAGR,SATR;AAUNS,MAAAA,KAAK,EAAGT;AAVF,KADwB;;AAAA,SAchCU,UAdgC,GAcnB,MAAOC,CAAP,IAAa;AACxBA,MAAAA,CAAC,CAACC,cAAF;AAEA,YAAMC,IAAI,GAAGF,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBZ,IAAlB,CAAuBa,KAApC;AACA,YAAMC,OAAO,GAAGN,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBX,OAAlB,CAA0BY,KAA1C;AAEA,YAAME,QAAQ,GAAG,MAAMC,KAAK,4DAAqDN,IAArD,cAA6DI,OAA7D,oBAA8EtB,OAA9E,mBAA5B;AACA,YAAMyB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,UAAIR,IAAI,IAAII,OAAZ,EAAqB;AACnBK,QAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,aAAKI,QAAL,CAAc;AACZzB,UAAAA,WAAW,EAAGqB,IAAI,CAACK,IAAL,CAAUC,IADZ;AAEZzB,UAAAA,eAAe,EAAGmB,IAAI,CAACK,IAAL,CAAUE,QAFhB;AAGZzB,UAAAA,eAAe,EAAGkB,IAAI,CAACK,IAAL,CAAUG,QAHhB;AAIZzB,UAAAA,IAAI,EAAGiB,IAAI,CAACS,IAJA;AAKZzB,UAAAA,OAAO,EAAGgB,IAAI,CAACU,GAAL,CAAS1B,OALP;AAMZE,UAAAA,IAAI,EAAGc,IAAI,CAACd,IAAL,CAAUyB,KANL;AAOZxB,UAAAA,QAAQ,EAAGa,IAAI,CAACK,IAAL,CAAUlB,QAPT;AAQZF,UAAAA,YAAY,EAAGe,IAAI,CAACY,OAAL,CAAa,CAAb,EAAgBC,IARnB;AASZzB,UAAAA,WAAW,EAAGY,IAAI,CAACY,OAAL,CAAa,CAAb,EAAgBxB,WATlB;AAUZC,UAAAA,KAAK,EAAG;AAVI,SAAd;AAYAa,QAAAA,OAAO,CAACC,GAAR,CAAYlB,YAAZ;AACD,OAfD,MAgBK;AACH,aAAKmB,QAAL,CAAc;AACZzB,UAAAA,WAAW,EAAGC,SADF;AAEZC,UAAAA,eAAe,EAAGD,SAFN;AAGZE,UAAAA,eAAe,EAAGF,SAHN;AAIZG,UAAAA,IAAI,EAAGH,SAJK;AAKZI,UAAAA,OAAO,EAAGJ,SALE;AAMZM,UAAAA,IAAI,EAAGN,SANK;AAOZO,UAAAA,QAAQ,EAAGP,SAPC;AAQZK,UAAAA,YAAY,EAAGL,SARH;AASZQ,UAAAA,WAAW,EAAGR,SATF;AAUZS,UAAAA,KAAK,EAAG;AAVI,SAAd;AAYD;AACF,KArD+B;AAAA;;AAuDhCyB,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,IAAD;AAAM,MAAA,UAAU,EAAE,KAAKxB,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAFF,EAOE;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AACE,MAAA,WAAW,EAAI,KAAKZ,KAAL,CAAWC,WAD5B;AAEE,MAAA,eAAe,EAAI,KAAKD,KAAL,CAAWG,eAFhC;AAGE,MAAA,eAAe,EAAI,KAAKH,KAAL,CAAWI,eAHhC;AAIE,MAAA,IAAI,EAAI,KAAKJ,KAAL,CAAWK,IAJrB;AAKE,MAAA,OAAO,EAAI,KAAKL,KAAL,CAAWM,OALxB;AAME,MAAA,IAAI,EAAI,KAAKN,KAAL,CAAWQ,IANrB;AAOE,MAAA,QAAQ,EAAI,KAAKR,KAAL,CAAWS,QAPzB;AAQE,MAAA,YAAY,EAAI,KAAKT,KAAL,CAAWO,YAR7B;AASE,MAAA,WAAW,EAAI,KAAKP,KAAL,CAAWU,WAT5B;AAUE,MAAA,KAAK,EAAI,KAAKV,KAAL,CAAWW,KAVtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAPF,CADF,CAFF,CADF;AA+BD;;AAvF+B;;AA0FlC,eAAeb,GAAf","sourcesContent":["import React from \"react\";\nimport Titles from \"./component/Titles\";\nimport Form from \"./component/Form\";\nimport Weather from \"./component/Weather\"\n\nconst API_KEY = \"aebdd7758f13157e1f0b407b96d57ed5\";\n\nclass App extends React.Component {\n  state = {\n    temperature : undefined,\n    min_temperature : undefined,\n    max_temperature : undefined,\n    city : undefined, \n    country : undefined,\n    weather_icon : undefined,\n    wind : undefined, \n    humidity : undefined, \n    description : undefined, \n    error : undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const CITY = e.target.elements.city.value;\n    const COUNTRY = e.target.elements.country.value;\n\n    const API_CALL = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${CITY},${COUNTRY}&APPID=${API_KEY}&units=metric`); \n    const DATA = await API_CALL.json();\n\n    if (CITY && COUNTRY) {\n      console.log(DATA);\n      this.setState({\n        temperature : DATA.main.temp,\n        min_temperature : DATA.main.temp_min,\n        max_temperature : DATA.main.temp_max,\n        city : DATA.name,\n        country : DATA.sys.country,\n        wind : DATA.wind.speed,\n        humidity : DATA.main.humidity,\n        weather_icon : DATA.weather[0].icon,\n        description : DATA.weather[0].description,\n        error : \"\"     \n      }); \n      console.log(weather_icon);\n    }\n    else {\n      this.setState({\n        temperature : undefined,\n        min_temperature : undefined,\n        max_temperature : undefined,\n        city : undefined,\n        country : undefined,\n        wind : undefined, \n        humidity : undefined,\n        weather_icon : undefined,\n        description : undefined,\n        error : \"Please enter City and Country name...\"      \n      }); \n    }\n  }\n\n  render() {\n    return (\n      <div>\n        \n        <div className=\"container\">\n          <div className=\"row\">\n            \n            <div className=\"col-md-5 form-container\">\n              <Titles />\n              <Form getWeather={this.getWeather} />  \n            </div>    \n\n            <div className=\"col-md-7 weather-container\">\n              <Weather\n                temperature = {this.state.temperature}\n                min_temperature = {this.state.min_temperature}\n                max_temperature = {this.state.max_temperature}\n                city = {this.state.city}\n                country = {this.state.country}\n                wind = {this.state.wind}\n                humidity = {this.state.humidity}\n                weather_icon = {this.state.weather_icon}\n                description = {this.state.description}\n                error = {this.state.error}\n              />\n            </div>\n\n          </div>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}